import asyncio

import aiohttp
import getpass

from fpl import FPL

async def main():
    async with aiohttp.ClientSession() as session:

        fpl = FPL(session)

        email = input("Enter your email address: ")

        password = getpass.getpass(prompt="Enter your password: ")

        user_id = input("Enter your user ID: ")
        # user_id can be obtained from the URL for previous gameweek history, my user ID = 2243886

        await fpl.login(email, password)
        user = await fpl.get_user(user_id)
        my_team = await user.get_team()

        exit = False
        while exit is False:
            printMenu()
            choice = input("Enter your choice [1-4]: ")
            if choice == '1':
                my_player_ids = [d['element'] for d in my_team]
                await printSortedVAPM(fpl, my_player_ids)
            elif choice == '2':
                player_id = int(input("Enter the player ID you would like alternatives for:"))
                additional_funds = int(input("Do you have any additional funds? "))
                alternatives_ids = await get_alternatives(fpl, player_id, additional_funds, 0)
                await printSortedVAPM(fpl, alternatives_ids)
            elif choice == '3':
                my_player_ids = [d['element'] for d in my_team]
                minimum_minutes = int(input("How many minutes do you require the alternative players to have played? "))
                additional_funds = int(input("Do you have any additional funds? "))
                await findBestAlternatives(fpl, my_player_ids, additional_funds, minimum_minutes)
            elif choice =='4':
                exit = True
            else:
                # Any inputs other than values 1-4 we print an error message
                input("Wrong menu selection. Enter any key to try again..")

def printMenu():
    print(30 * "-", "TOOLS MENU", 30 * "-")
    print("1. Show VAPM of current players ")
    print("2. Find player alternatives ")
    print("3. Find best alternatives ")
    print("4. Exit ")

async def get_alternatives(fpl, player_id, additional_funds, minimum_minutes):

    current_player = await fpl.get_player(player_id)
    print("Getting alternatives for player: ", current_player)
    players = await fpl.get_players()
    alternatives = [p for p in players if p.element_type == current_player.element_type]

    alternatives = [p for p in alternatives if p.now_cost <= current_player.now_cost + additional_funds]
    alternatives = [p for p in alternatives if p.minutes >= minimum_minutes]

    alternatives_ids = [player.id for player in alternatives]
    return alternatives_ids

async def findBestAlternatives(fpl, player_ids, additional_funds, minimum_minutes):
    #Go through each player and get alternatives then sort the whole list based on the difference in vapm

    alternatives_with_higher_vapm = []
    for player_id in player_ids:
        alternatives_ids = await get_alternatives(fpl, player_id, additional_funds, minimum_minutes)
        player = await fpl.get_player(player_id)
        player_vapm = await player.vapm
        for alternatives_id in alternatives_ids:
            if alternatives_id not in player_ids:
                alternative_player = await fpl.get_player(alternatives_id)
                alternative_vapm = await alternative_player.vapm
                if alternative_vapm > player_vapm:
                    alternatives_with_higher_vapm.append((player_id, alternatives_id))

    # Calculate VAPM difference for each pair
    player_value_dict = {}
    for pair in alternatives_with_higher_vapm:
        player = await fpl.get_player(pair[0])
        player_vapm = await player.vapm
        alternative = await fpl.get_player(pair[1])
        alternative_vapm = await alternative.vapm
        difference = alternative_vapm - player_vapm
        player_value_dict[pair] = difference

    # Sort based on VAPM and print sorted list
    for key, value in sorted(player_value_dict.items(), key=lambda item: item[1]):
        player = await fpl.get_player(key[0])
        alternative = await fpl.get_player(key[1])
        price_difference = (alternative.now_cost - player.now_cost) / 10
        print("Out: %s In: %s VAPM difference: %s Price difference: £%sm" % (player, alternative, value, price_difference))


async def printSortedVAPM(fpl, player_ids):
    players = await fpl.get_players(player_ids)


    player_value_dict = {}
    for player_id in player_ids:
        player = await fpl.get_player(player_id)
        vapm = await player.vapm
        player_value_dict[player_id] = vapm

    sum = 0
    print("Value added per £1m (lowest to highest)")
    for key, value in sorted(player_value_dict.items(), key=lambda item: item[1]):
        player = await fpl.get_player(key)
        print("%s - %s: %s" % (key, player, value))
        sum += value

    print("Sum total: %s" % sum)

asyncio.run(main())